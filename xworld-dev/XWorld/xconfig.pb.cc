// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xconfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* zonecenter_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zonecenter_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* worldserver_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  worldserver_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* robot_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  robot_config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_xconfig_2eproto() {
  protobuf_AddDesc_xconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xconfig.proto");
  GOOGLE_CHECK(file != NULL);
  zonecenter_config_descriptor_ = file->message_type(0);
  static const int zonecenter_config_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, ws_mgr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, db_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, db_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, player_start_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, new_role_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, new_role_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, new_role_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, login_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, paysys_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, paysys_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, use_paysys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, messagehub_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, messagehub_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, messagehub_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, guard_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, new_role_is_fuben_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, open_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, auto_create_domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, gated_launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, db_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, db_bg_save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, allow_test_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, default_channel_),
  };
  zonecenter_config_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      zonecenter_config_descriptor_,
      zonecenter_config::internal_default_instance(),
      zonecenter_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, _has_bits_),
      -1,
      -1,
      sizeof(zonecenter_config),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zonecenter_config, _internal_metadata_));
  worldserver_config_descriptor_ = file->message_type(1);
  static const int worldserver_config_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, center_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, ws_mgr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, male_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, female_template_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, first_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, missile_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, guard_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, debug_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, damage_debug_),
  };
  worldserver_config_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      worldserver_config_descriptor_,
      worldserver_config::internal_default_instance(),
      worldserver_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, _has_bits_),
      -1,
      -1,
      sizeof(worldserver_config),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(worldserver_config, _internal_metadata_));
  robot_config_descriptor_ = file->message_type(2);
  static const int robot_config_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_config, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_config, group_),
  };
  robot_config_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      robot_config_descriptor_,
      robot_config::internal_default_instance(),
      robot_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_config, _has_bits_),
      -1,
      -1,
      sizeof(robot_config),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(robot_config, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      zonecenter_config_descriptor_, zonecenter_config::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      worldserver_config_descriptor_, worldserver_config::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      robot_config_descriptor_, robot_config::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xconfig_2eproto() {
  zonecenter_config_default_instance_.Shutdown();
  delete zonecenter_config_reflection_;
  worldserver_config_default_instance_.Shutdown();
  delete worldserver_config_reflection_;
  robot_config_default_instance_.Shutdown();
  delete robot_config_reflection_;
}

void protobuf_InitDefaults_xconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  zonecenter_config_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  worldserver_config_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  robot_config_default_instance_.DefaultConstruct();
  zonecenter_config_default_instance_.get_mutable()->InitAsDefaultInstance();
  worldserver_config_default_instance_.get_mutable()->InitAsDefaultInstance();
  robot_config_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_xconfig_2eproto_once_);
void protobuf_InitDefaults_xconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_xconfig_2eproto_once_,
                 &protobuf_InitDefaults_xconfig_2eproto_impl);
}
void protobuf_AddDesc_xconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_xconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rxconfig.proto\"\250\004\n\021zonecenter_config\022\023\n"
    "\013ws_mgr_port\030\001 \001(\005\022\r\n\005db_ip\030\002 \001(\t\022\017\n\007db_"
    "port\030\003 \001(\005\022\017\n\007db_name\030\004 \001(\t\022\031\n\021player_st"
    "art_port\030\005 \001(\005\022\024\n\014new_role_map\030\006 \001(\005\022\022\n\n"
    "new_role_x\030\007 \001(\005\022\022\n\nnew_role_y\030\010 \001(\005\022\022\n\n"
    "login_port\030\t \001(\005\022\021\n\tpaysys_ip\030\n \001(\t\022\023\n\013p"
    "aysys_port\030\013 \001(\005\022\022\n\nuse_paysys\030\014 \001(\010\022\017\n\007"
    "app_key\030\r \001(\t\022\031\n\021messagehub_enable\030\016 \001(\010"
    "\022\025\n\rmessagehub_ip\030\017 \001(\t\022\027\n\017messagehub_po"
    "rt\030\020 \001(\005\022\022\n\nguard_port\030\021 \001(\005\022\031\n\021new_role"
    "_is_fuben\030\022 \001(\010\022\017\n\007open_gm\030\023 \001(\010\022\032\n\022auto"
    "_create_domain\030\024 \001(\010\022\024\n\014gated_launch\030\025 \001"
    "(\010\022\017\n\007db_pass\030\026 \001(\t\022\022\n\ndb_bg_save\030\027 \001(\010\022"
    "\030\n\020allow_test_login\030\030 \001(\010\022\027\n\017default_cha"
    "nnel\030\031 \001(\t\"\373\001\n\022worldserver_config\022\021\n\tcen"
    "ter_ip\030\001 \001(\t\022\023\n\013ws_mgr_port\030\002 \001(\005\022\021\n\tpub"
    "lic_ip\030\003 \001(\t\022\025\n\rmale_template\030\004 \001(\005\022\027\n\017f"
    "emale_template\030\005 \001(\005\022\025\n\rfirst_task_id\030\006 "
    "\001(\005\022\017\n\007app_key\030\007 \001(\t\022\025\n\rmissile_debug\030\010 "
    "\001(\010\022\022\n\nguard_port\030\t \001(\005\022\021\n\tdebug_log\030\n \001"
    "(\010\022\024\n\014damage_debug\030\013 \001(\010\"0\n\014robot_config"
    "\022\021\n\tserver_ip\030\001 \001(\t\022\r\n\005group\030\002 \001(\005", 874);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xconfig.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xconfig_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_xconfig_2eproto_once_);
void protobuf_AddDesc_xconfig_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_xconfig_2eproto_once_,
                 &protobuf_AddDesc_xconfig_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xconfig_2eproto {
  StaticDescriptorInitializer_xconfig_2eproto() {
    protobuf_AddDesc_xconfig_2eproto();
  }
} static_descriptor_initializer_xconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int zonecenter_config::kWsMgrPortFieldNumber;
const int zonecenter_config::kDbIpFieldNumber;
const int zonecenter_config::kDbPortFieldNumber;
const int zonecenter_config::kDbNameFieldNumber;
const int zonecenter_config::kPlayerStartPortFieldNumber;
const int zonecenter_config::kNewRoleMapFieldNumber;
const int zonecenter_config::kNewRoleXFieldNumber;
const int zonecenter_config::kNewRoleYFieldNumber;
const int zonecenter_config::kLoginPortFieldNumber;
const int zonecenter_config::kPaysysIpFieldNumber;
const int zonecenter_config::kPaysysPortFieldNumber;
const int zonecenter_config::kUsePaysysFieldNumber;
const int zonecenter_config::kAppKeyFieldNumber;
const int zonecenter_config::kMessagehubEnableFieldNumber;
const int zonecenter_config::kMessagehubIpFieldNumber;
const int zonecenter_config::kMessagehubPortFieldNumber;
const int zonecenter_config::kGuardPortFieldNumber;
const int zonecenter_config::kNewRoleIsFubenFieldNumber;
const int zonecenter_config::kOpenGmFieldNumber;
const int zonecenter_config::kAutoCreateDomainFieldNumber;
const int zonecenter_config::kGatedLaunchFieldNumber;
const int zonecenter_config::kDbPassFieldNumber;
const int zonecenter_config::kDbBgSaveFieldNumber;
const int zonecenter_config::kAllowTestLoginFieldNumber;
const int zonecenter_config::kDefaultChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

zonecenter_config::zonecenter_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_xconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:zonecenter_config)
}

void zonecenter_config::InitAsDefaultInstance() {
}

zonecenter_config::zonecenter_config(const zonecenter_config& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:zonecenter_config)
}

void zonecenter_config::SharedCtor() {
  _cached_size_ = 0;
  db_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paysys_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagehub_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_pass_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ws_mgr_port_, 0, reinterpret_cast<char*>(&allow_test_login_) -
    reinterpret_cast<char*>(&ws_mgr_port_) + sizeof(allow_test_login_));
}

zonecenter_config::~zonecenter_config() {
  // @@protoc_insertion_point(destructor:zonecenter_config)
  SharedDtor();
}

void zonecenter_config::SharedDtor() {
  db_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paysys_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagehub_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_pass_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void zonecenter_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zonecenter_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zonecenter_config_descriptor_;
}

const zonecenter_config& zonecenter_config::default_instance() {
  protobuf_InitDefaults_xconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<zonecenter_config> zonecenter_config_default_instance_;

zonecenter_config* zonecenter_config::New(::google::protobuf::Arena* arena) const {
  zonecenter_config* n = new zonecenter_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void zonecenter_config::Clear() {
// @@protoc_insertion_point(message_clear_start:zonecenter_config)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(zonecenter_config, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<zonecenter_config*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ws_mgr_port_, new_role_y_);
    if (has_db_ip()) {
      db_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_db_name()) {
      db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(login_port_, messagehub_enable_);
    if (has_paysys_ip()) {
      paysys_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_key()) {
      app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_messagehub_ip()) {
      messagehub_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    messagehub_port_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(new_role_is_fuben_, open_gm_);
    ZR_(guard_port_, allow_test_login_);
    if (has_db_pass()) {
      db_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_default_channel()) {
    default_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool zonecenter_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zonecenter_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ws_mgr_port = 1;
      case 1: {
        if (tag == 8) {
          set_has_ws_mgr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ws_mgr_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_db_ip;
        break;
      }

      // optional string db_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_db_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_ip().data(), this->db_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.db_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_db_port;
        break;
      }

      // optional int32 db_port = 3;
      case 3: {
        if (tag == 24) {
         parse_db_port:
          set_has_db_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_db_name;
        break;
      }

      // optional string db_name = 4;
      case 4: {
        if (tag == 34) {
         parse_db_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.db_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_player_start_port;
        break;
      }

      // optional int32 player_start_port = 5;
      case 5: {
        if (tag == 40) {
         parse_player_start_port:
          set_has_player_start_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_start_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_new_role_map;
        break;
      }

      // optional int32 new_role_map = 6;
      case 6: {
        if (tag == 48) {
         parse_new_role_map:
          set_has_new_role_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_role_map_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_new_role_x;
        break;
      }

      // optional int32 new_role_x = 7;
      case 7: {
        if (tag == 56) {
         parse_new_role_x:
          set_has_new_role_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_role_x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_new_role_y;
        break;
      }

      // optional int32 new_role_y = 8;
      case 8: {
        if (tag == 64) {
         parse_new_role_y:
          set_has_new_role_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_role_y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_login_port;
        break;
      }

      // optional int32 login_port = 9;
      case 9: {
        if (tag == 72) {
         parse_login_port:
          set_has_login_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_paysys_ip;
        break;
      }

      // optional string paysys_ip = 10;
      case 10: {
        if (tag == 82) {
         parse_paysys_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paysys_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paysys_ip().data(), this->paysys_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.paysys_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_paysys_port;
        break;
      }

      // optional int32 paysys_port = 11;
      case 11: {
        if (tag == 88) {
         parse_paysys_port:
          set_has_paysys_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paysys_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_use_paysys;
        break;
      }

      // optional bool use_paysys = 12;
      case 12: {
        if (tag == 96) {
         parse_use_paysys:
          set_has_use_paysys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_paysys_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_app_key;
        break;
      }

      // optional string app_key = 13;
      case 13: {
        if (tag == 106) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.app_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_messagehub_enable;
        break;
      }

      // optional bool messagehub_enable = 14;
      case 14: {
        if (tag == 112) {
         parse_messagehub_enable:
          set_has_messagehub_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &messagehub_enable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_messagehub_ip;
        break;
      }

      // optional string messagehub_ip = 15;
      case 15: {
        if (tag == 122) {
         parse_messagehub_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagehub_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagehub_ip().data(), this->messagehub_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.messagehub_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_messagehub_port;
        break;
      }

      // optional int32 messagehub_port = 16;
      case 16: {
        if (tag == 128) {
         parse_messagehub_port:
          set_has_messagehub_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagehub_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_guard_port;
        break;
      }

      // optional int32 guard_port = 17;
      case 17: {
        if (tag == 136) {
         parse_guard_port:
          set_has_guard_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_new_role_is_fuben;
        break;
      }

      // optional bool new_role_is_fuben = 18;
      case 18: {
        if (tag == 144) {
         parse_new_role_is_fuben:
          set_has_new_role_is_fuben();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &new_role_is_fuben_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_open_gm;
        break;
      }

      // optional bool open_gm = 19;
      case 19: {
        if (tag == 152) {
         parse_open_gm:
          set_has_open_gm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_gm_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_auto_create_domain;
        break;
      }

      // optional bool auto_create_domain = 20;
      case 20: {
        if (tag == 160) {
         parse_auto_create_domain:
          set_has_auto_create_domain();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_create_domain_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_gated_launch;
        break;
      }

      // optional bool gated_launch = 21;
      case 21: {
        if (tag == 168) {
         parse_gated_launch:
          set_has_gated_launch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gated_launch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_db_pass;
        break;
      }

      // optional string db_pass = 22;
      case 22: {
        if (tag == 178) {
         parse_db_pass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_pass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_pass().data(), this->db_pass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.db_pass");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_db_bg_save;
        break;
      }

      // optional bool db_bg_save = 23;
      case 23: {
        if (tag == 184) {
         parse_db_bg_save:
          set_has_db_bg_save();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &db_bg_save_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_allow_test_login;
        break;
      }

      // optional bool allow_test_login = 24;
      case 24: {
        if (tag == 192) {
         parse_allow_test_login:
          set_has_allow_test_login();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_test_login_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_default_channel;
        break;
      }

      // optional string default_channel = 25;
      case 25: {
        if (tag == 202) {
         parse_default_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_channel().data(), this->default_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "zonecenter_config.default_channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zonecenter_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zonecenter_config)
  return false;
#undef DO_
}

void zonecenter_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zonecenter_config)
  // optional int32 ws_mgr_port = 1;
  if (has_ws_mgr_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ws_mgr_port(), output);
  }

  // optional string db_ip = 2;
  if (has_db_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_ip().data(), this->db_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_ip(), output);
  }

  // optional int32 db_port = 3;
  if (has_db_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->db_port(), output);
  }

  // optional string db_name = 4;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db_name(), output);
  }

  // optional int32 player_start_port = 5;
  if (has_player_start_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->player_start_port(), output);
  }

  // optional int32 new_role_map = 6;
  if (has_new_role_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->new_role_map(), output);
  }

  // optional int32 new_role_x = 7;
  if (has_new_role_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->new_role_x(), output);
  }

  // optional int32 new_role_y = 8;
  if (has_new_role_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->new_role_y(), output);
  }

  // optional int32 login_port = 9;
  if (has_login_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->login_port(), output);
  }

  // optional string paysys_ip = 10;
  if (has_paysys_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paysys_ip().data(), this->paysys_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.paysys_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->paysys_ip(), output);
  }

  // optional int32 paysys_port = 11;
  if (has_paysys_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->paysys_port(), output);
  }

  // optional bool use_paysys = 12;
  if (has_use_paysys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_paysys(), output);
  }

  // optional string app_key = 13;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.app_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->app_key(), output);
  }

  // optional bool messagehub_enable = 14;
  if (has_messagehub_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->messagehub_enable(), output);
  }

  // optional string messagehub_ip = 15;
  if (has_messagehub_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagehub_ip().data(), this->messagehub_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.messagehub_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->messagehub_ip(), output);
  }

  // optional int32 messagehub_port = 16;
  if (has_messagehub_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->messagehub_port(), output);
  }

  // optional int32 guard_port = 17;
  if (has_guard_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->guard_port(), output);
  }

  // optional bool new_role_is_fuben = 18;
  if (has_new_role_is_fuben()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->new_role_is_fuben(), output);
  }

  // optional bool open_gm = 19;
  if (has_open_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->open_gm(), output);
  }

  // optional bool auto_create_domain = 20;
  if (has_auto_create_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->auto_create_domain(), output);
  }

  // optional bool gated_launch = 21;
  if (has_gated_launch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->gated_launch(), output);
  }

  // optional string db_pass = 22;
  if (has_db_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_pass().data(), this->db_pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_pass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->db_pass(), output);
  }

  // optional bool db_bg_save = 23;
  if (has_db_bg_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->db_bg_save(), output);
  }

  // optional bool allow_test_login = 24;
  if (has_allow_test_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->allow_test_login(), output);
  }

  // optional string default_channel = 25;
  if (has_default_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_channel().data(), this->default_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.default_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->default_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zonecenter_config)
}

::google::protobuf::uint8* zonecenter_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zonecenter_config)
  // optional int32 ws_mgr_port = 1;
  if (has_ws_mgr_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ws_mgr_port(), target);
  }

  // optional string db_ip = 2;
  if (has_db_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_ip().data(), this->db_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_ip(), target);
  }

  // optional int32 db_port = 3;
  if (has_db_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->db_port(), target);
  }

  // optional string db_name = 4;
  if (has_db_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->db_name(), target);
  }

  // optional int32 player_start_port = 5;
  if (has_player_start_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->player_start_port(), target);
  }

  // optional int32 new_role_map = 6;
  if (has_new_role_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->new_role_map(), target);
  }

  // optional int32 new_role_x = 7;
  if (has_new_role_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->new_role_x(), target);
  }

  // optional int32 new_role_y = 8;
  if (has_new_role_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->new_role_y(), target);
  }

  // optional int32 login_port = 9;
  if (has_login_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->login_port(), target);
  }

  // optional string paysys_ip = 10;
  if (has_paysys_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paysys_ip().data(), this->paysys_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.paysys_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->paysys_ip(), target);
  }

  // optional int32 paysys_port = 11;
  if (has_paysys_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->paysys_port(), target);
  }

  // optional bool use_paysys = 12;
  if (has_use_paysys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_paysys(), target);
  }

  // optional string app_key = 13;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.app_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->app_key(), target);
  }

  // optional bool messagehub_enable = 14;
  if (has_messagehub_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->messagehub_enable(), target);
  }

  // optional string messagehub_ip = 15;
  if (has_messagehub_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagehub_ip().data(), this->messagehub_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.messagehub_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->messagehub_ip(), target);
  }

  // optional int32 messagehub_port = 16;
  if (has_messagehub_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->messagehub_port(), target);
  }

  // optional int32 guard_port = 17;
  if (has_guard_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->guard_port(), target);
  }

  // optional bool new_role_is_fuben = 18;
  if (has_new_role_is_fuben()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->new_role_is_fuben(), target);
  }

  // optional bool open_gm = 19;
  if (has_open_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->open_gm(), target);
  }

  // optional bool auto_create_domain = 20;
  if (has_auto_create_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->auto_create_domain(), target);
  }

  // optional bool gated_launch = 21;
  if (has_gated_launch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->gated_launch(), target);
  }

  // optional string db_pass = 22;
  if (has_db_pass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_pass().data(), this->db_pass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.db_pass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->db_pass(), target);
  }

  // optional bool db_bg_save = 23;
  if (has_db_bg_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->db_bg_save(), target);
  }

  // optional bool allow_test_login = 24;
  if (has_allow_test_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->allow_test_login(), target);
  }

  // optional string default_channel = 25;
  if (has_default_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_channel().data(), this->default_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "zonecenter_config.default_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->default_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zonecenter_config)
  return target;
}

size_t zonecenter_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zonecenter_config)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ws_mgr_port = 1;
    if (has_ws_mgr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ws_mgr_port());
    }

    // optional string db_ip = 2;
    if (has_db_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_ip());
    }

    // optional int32 db_port = 3;
    if (has_db_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_port());
    }

    // optional string db_name = 4;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }

    // optional int32 player_start_port = 5;
    if (has_player_start_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_start_port());
    }

    // optional int32 new_role_map = 6;
    if (has_new_role_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_role_map());
    }

    // optional int32 new_role_x = 7;
    if (has_new_role_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_role_x());
    }

    // optional int32 new_role_y = 8;
    if (has_new_role_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_role_y());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 login_port = 9;
    if (has_login_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_port());
    }

    // optional string paysys_ip = 10;
    if (has_paysys_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paysys_ip());
    }

    // optional int32 paysys_port = 11;
    if (has_paysys_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paysys_port());
    }

    // optional bool use_paysys = 12;
    if (has_use_paysys()) {
      total_size += 1 + 1;
    }

    // optional string app_key = 13;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }

    // optional bool messagehub_enable = 14;
    if (has_messagehub_enable()) {
      total_size += 1 + 1;
    }

    // optional string messagehub_ip = 15;
    if (has_messagehub_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagehub_ip());
    }

    // optional int32 messagehub_port = 16;
    if (has_messagehub_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagehub_port());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 guard_port = 17;
    if (has_guard_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard_port());
    }

    // optional bool new_role_is_fuben = 18;
    if (has_new_role_is_fuben()) {
      total_size += 2 + 1;
    }

    // optional bool open_gm = 19;
    if (has_open_gm()) {
      total_size += 2 + 1;
    }

    // optional bool auto_create_domain = 20;
    if (has_auto_create_domain()) {
      total_size += 2 + 1;
    }

    // optional bool gated_launch = 21;
    if (has_gated_launch()) {
      total_size += 2 + 1;
    }

    // optional string db_pass = 22;
    if (has_db_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_pass());
    }

    // optional bool db_bg_save = 23;
    if (has_db_bg_save()) {
      total_size += 2 + 1;
    }

    // optional bool allow_test_login = 24;
    if (has_allow_test_login()) {
      total_size += 2 + 1;
    }

  }
  // optional string default_channel = 25;
  if (has_default_channel()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->default_channel());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zonecenter_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zonecenter_config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const zonecenter_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const zonecenter_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zonecenter_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zonecenter_config)
    UnsafeMergeFrom(*source);
  }
}

void zonecenter_config::MergeFrom(const zonecenter_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zonecenter_config)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void zonecenter_config::UnsafeMergeFrom(const zonecenter_config& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ws_mgr_port()) {
      set_ws_mgr_port(from.ws_mgr_port());
    }
    if (from.has_db_ip()) {
      set_has_db_ip();
      db_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_ip_);
    }
    if (from.has_db_port()) {
      set_db_port(from.db_port());
    }
    if (from.has_db_name()) {
      set_has_db_name();
      db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
    }
    if (from.has_player_start_port()) {
      set_player_start_port(from.player_start_port());
    }
    if (from.has_new_role_map()) {
      set_new_role_map(from.new_role_map());
    }
    if (from.has_new_role_x()) {
      set_new_role_x(from.new_role_x());
    }
    if (from.has_new_role_y()) {
      set_new_role_y(from.new_role_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_login_port()) {
      set_login_port(from.login_port());
    }
    if (from.has_paysys_ip()) {
      set_has_paysys_ip();
      paysys_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paysys_ip_);
    }
    if (from.has_paysys_port()) {
      set_paysys_port(from.paysys_port());
    }
    if (from.has_use_paysys()) {
      set_use_paysys(from.use_paysys());
    }
    if (from.has_app_key()) {
      set_has_app_key();
      app_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_key_);
    }
    if (from.has_messagehub_enable()) {
      set_messagehub_enable(from.messagehub_enable());
    }
    if (from.has_messagehub_ip()) {
      set_has_messagehub_ip();
      messagehub_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagehub_ip_);
    }
    if (from.has_messagehub_port()) {
      set_messagehub_port(from.messagehub_port());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guard_port()) {
      set_guard_port(from.guard_port());
    }
    if (from.has_new_role_is_fuben()) {
      set_new_role_is_fuben(from.new_role_is_fuben());
    }
    if (from.has_open_gm()) {
      set_open_gm(from.open_gm());
    }
    if (from.has_auto_create_domain()) {
      set_auto_create_domain(from.auto_create_domain());
    }
    if (from.has_gated_launch()) {
      set_gated_launch(from.gated_launch());
    }
    if (from.has_db_pass()) {
      set_has_db_pass();
      db_pass_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_pass_);
    }
    if (from.has_db_bg_save()) {
      set_db_bg_save(from.db_bg_save());
    }
    if (from.has_allow_test_login()) {
      set_allow_test_login(from.allow_test_login());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_default_channel()) {
      set_has_default_channel();
      default_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_channel_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void zonecenter_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zonecenter_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zonecenter_config::CopyFrom(const zonecenter_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zonecenter_config)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool zonecenter_config::IsInitialized() const {

  return true;
}

void zonecenter_config::Swap(zonecenter_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void zonecenter_config::InternalSwap(zonecenter_config* other) {
  std::swap(ws_mgr_port_, other->ws_mgr_port_);
  db_ip_.Swap(&other->db_ip_);
  std::swap(db_port_, other->db_port_);
  db_name_.Swap(&other->db_name_);
  std::swap(player_start_port_, other->player_start_port_);
  std::swap(new_role_map_, other->new_role_map_);
  std::swap(new_role_x_, other->new_role_x_);
  std::swap(new_role_y_, other->new_role_y_);
  std::swap(login_port_, other->login_port_);
  paysys_ip_.Swap(&other->paysys_ip_);
  std::swap(paysys_port_, other->paysys_port_);
  std::swap(use_paysys_, other->use_paysys_);
  app_key_.Swap(&other->app_key_);
  std::swap(messagehub_enable_, other->messagehub_enable_);
  messagehub_ip_.Swap(&other->messagehub_ip_);
  std::swap(messagehub_port_, other->messagehub_port_);
  std::swap(guard_port_, other->guard_port_);
  std::swap(new_role_is_fuben_, other->new_role_is_fuben_);
  std::swap(open_gm_, other->open_gm_);
  std::swap(auto_create_domain_, other->auto_create_domain_);
  std::swap(gated_launch_, other->gated_launch_);
  db_pass_.Swap(&other->db_pass_);
  std::swap(db_bg_save_, other->db_bg_save_);
  std::swap(allow_test_login_, other->allow_test_login_);
  default_channel_.Swap(&other->default_channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata zonecenter_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zonecenter_config_descriptor_;
  metadata.reflection = zonecenter_config_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// zonecenter_config

// optional int32 ws_mgr_port = 1;
bool zonecenter_config::has_ws_mgr_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void zonecenter_config::set_has_ws_mgr_port() {
  _has_bits_[0] |= 0x00000001u;
}
void zonecenter_config::clear_has_ws_mgr_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void zonecenter_config::clear_ws_mgr_port() {
  ws_mgr_port_ = 0;
  clear_has_ws_mgr_port();
}
::google::protobuf::int32 zonecenter_config::ws_mgr_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.ws_mgr_port)
  return ws_mgr_port_;
}
void zonecenter_config::set_ws_mgr_port(::google::protobuf::int32 value) {
  set_has_ws_mgr_port();
  ws_mgr_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.ws_mgr_port)
}

// optional string db_ip = 2;
bool zonecenter_config::has_db_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void zonecenter_config::set_has_db_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void zonecenter_config::clear_has_db_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void zonecenter_config::clear_db_ip() {
  db_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_ip();
}
const ::std::string& zonecenter_config::db_ip() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.db_ip)
  return db_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_db_ip(const ::std::string& value) {
  set_has_db_ip();
  db_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.db_ip)
}
void zonecenter_config::set_db_ip(const char* value) {
  set_has_db_ip();
  db_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.db_ip)
}
void zonecenter_config::set_db_ip(const char* value, size_t size) {
  set_has_db_ip();
  db_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.db_ip)
}
::std::string* zonecenter_config::mutable_db_ip() {
  set_has_db_ip();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.db_ip)
  return db_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_db_ip() {
  // @@protoc_insertion_point(field_release:zonecenter_config.db_ip)
  clear_has_db_ip();
  return db_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_db_ip(::std::string* db_ip) {
  if (db_ip != NULL) {
    set_has_db_ip();
  } else {
    clear_has_db_ip();
  }
  db_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_ip);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.db_ip)
}

// optional int32 db_port = 3;
bool zonecenter_config::has_db_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void zonecenter_config::set_has_db_port() {
  _has_bits_[0] |= 0x00000004u;
}
void zonecenter_config::clear_has_db_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void zonecenter_config::clear_db_port() {
  db_port_ = 0;
  clear_has_db_port();
}
::google::protobuf::int32 zonecenter_config::db_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.db_port)
  return db_port_;
}
void zonecenter_config::set_db_port(::google::protobuf::int32 value) {
  set_has_db_port();
  db_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.db_port)
}

// optional string db_name = 4;
bool zonecenter_config::has_db_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void zonecenter_config::set_has_db_name() {
  _has_bits_[0] |= 0x00000008u;
}
void zonecenter_config::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void zonecenter_config::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
const ::std::string& zonecenter_config::db_name() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.db_name)
  return db_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.db_name)
}
void zonecenter_config::set_db_name(const char* value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.db_name)
}
void zonecenter_config::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.db_name)
}
::std::string* zonecenter_config::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_db_name() {
  // @@protoc_insertion_point(field_release:zonecenter_config.db_name)
  clear_has_db_name();
  return db_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.db_name)
}

// optional int32 player_start_port = 5;
bool zonecenter_config::has_player_start_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void zonecenter_config::set_has_player_start_port() {
  _has_bits_[0] |= 0x00000010u;
}
void zonecenter_config::clear_has_player_start_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void zonecenter_config::clear_player_start_port() {
  player_start_port_ = 0;
  clear_has_player_start_port();
}
::google::protobuf::int32 zonecenter_config::player_start_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.player_start_port)
  return player_start_port_;
}
void zonecenter_config::set_player_start_port(::google::protobuf::int32 value) {
  set_has_player_start_port();
  player_start_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.player_start_port)
}

// optional int32 new_role_map = 6;
bool zonecenter_config::has_new_role_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void zonecenter_config::set_has_new_role_map() {
  _has_bits_[0] |= 0x00000020u;
}
void zonecenter_config::clear_has_new_role_map() {
  _has_bits_[0] &= ~0x00000020u;
}
void zonecenter_config::clear_new_role_map() {
  new_role_map_ = 0;
  clear_has_new_role_map();
}
::google::protobuf::int32 zonecenter_config::new_role_map() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.new_role_map)
  return new_role_map_;
}
void zonecenter_config::set_new_role_map(::google::protobuf::int32 value) {
  set_has_new_role_map();
  new_role_map_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.new_role_map)
}

// optional int32 new_role_x = 7;
bool zonecenter_config::has_new_role_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void zonecenter_config::set_has_new_role_x() {
  _has_bits_[0] |= 0x00000040u;
}
void zonecenter_config::clear_has_new_role_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void zonecenter_config::clear_new_role_x() {
  new_role_x_ = 0;
  clear_has_new_role_x();
}
::google::protobuf::int32 zonecenter_config::new_role_x() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.new_role_x)
  return new_role_x_;
}
void zonecenter_config::set_new_role_x(::google::protobuf::int32 value) {
  set_has_new_role_x();
  new_role_x_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.new_role_x)
}

// optional int32 new_role_y = 8;
bool zonecenter_config::has_new_role_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void zonecenter_config::set_has_new_role_y() {
  _has_bits_[0] |= 0x00000080u;
}
void zonecenter_config::clear_has_new_role_y() {
  _has_bits_[0] &= ~0x00000080u;
}
void zonecenter_config::clear_new_role_y() {
  new_role_y_ = 0;
  clear_has_new_role_y();
}
::google::protobuf::int32 zonecenter_config::new_role_y() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.new_role_y)
  return new_role_y_;
}
void zonecenter_config::set_new_role_y(::google::protobuf::int32 value) {
  set_has_new_role_y();
  new_role_y_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.new_role_y)
}

// optional int32 login_port = 9;
bool zonecenter_config::has_login_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void zonecenter_config::set_has_login_port() {
  _has_bits_[0] |= 0x00000100u;
}
void zonecenter_config::clear_has_login_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void zonecenter_config::clear_login_port() {
  login_port_ = 0;
  clear_has_login_port();
}
::google::protobuf::int32 zonecenter_config::login_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.login_port)
  return login_port_;
}
void zonecenter_config::set_login_port(::google::protobuf::int32 value) {
  set_has_login_port();
  login_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.login_port)
}

// optional string paysys_ip = 10;
bool zonecenter_config::has_paysys_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void zonecenter_config::set_has_paysys_ip() {
  _has_bits_[0] |= 0x00000200u;
}
void zonecenter_config::clear_has_paysys_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
void zonecenter_config::clear_paysys_ip() {
  paysys_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paysys_ip();
}
const ::std::string& zonecenter_config::paysys_ip() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.paysys_ip)
  return paysys_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_paysys_ip(const ::std::string& value) {
  set_has_paysys_ip();
  paysys_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.paysys_ip)
}
void zonecenter_config::set_paysys_ip(const char* value) {
  set_has_paysys_ip();
  paysys_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.paysys_ip)
}
void zonecenter_config::set_paysys_ip(const char* value, size_t size) {
  set_has_paysys_ip();
  paysys_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.paysys_ip)
}
::std::string* zonecenter_config::mutable_paysys_ip() {
  set_has_paysys_ip();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.paysys_ip)
  return paysys_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_paysys_ip() {
  // @@protoc_insertion_point(field_release:zonecenter_config.paysys_ip)
  clear_has_paysys_ip();
  return paysys_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_paysys_ip(::std::string* paysys_ip) {
  if (paysys_ip != NULL) {
    set_has_paysys_ip();
  } else {
    clear_has_paysys_ip();
  }
  paysys_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paysys_ip);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.paysys_ip)
}

// optional int32 paysys_port = 11;
bool zonecenter_config::has_paysys_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void zonecenter_config::set_has_paysys_port() {
  _has_bits_[0] |= 0x00000400u;
}
void zonecenter_config::clear_has_paysys_port() {
  _has_bits_[0] &= ~0x00000400u;
}
void zonecenter_config::clear_paysys_port() {
  paysys_port_ = 0;
  clear_has_paysys_port();
}
::google::protobuf::int32 zonecenter_config::paysys_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.paysys_port)
  return paysys_port_;
}
void zonecenter_config::set_paysys_port(::google::protobuf::int32 value) {
  set_has_paysys_port();
  paysys_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.paysys_port)
}

// optional bool use_paysys = 12;
bool zonecenter_config::has_use_paysys() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void zonecenter_config::set_has_use_paysys() {
  _has_bits_[0] |= 0x00000800u;
}
void zonecenter_config::clear_has_use_paysys() {
  _has_bits_[0] &= ~0x00000800u;
}
void zonecenter_config::clear_use_paysys() {
  use_paysys_ = false;
  clear_has_use_paysys();
}
bool zonecenter_config::use_paysys() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.use_paysys)
  return use_paysys_;
}
void zonecenter_config::set_use_paysys(bool value) {
  set_has_use_paysys();
  use_paysys_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.use_paysys)
}

// optional string app_key = 13;
bool zonecenter_config::has_app_key() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void zonecenter_config::set_has_app_key() {
  _has_bits_[0] |= 0x00001000u;
}
void zonecenter_config::clear_has_app_key() {
  _has_bits_[0] &= ~0x00001000u;
}
void zonecenter_config::clear_app_key() {
  app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_key();
}
const ::std::string& zonecenter_config::app_key() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.app_key)
  return app_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_app_key(const ::std::string& value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.app_key)
}
void zonecenter_config::set_app_key(const char* value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.app_key)
}
void zonecenter_config::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.app_key)
}
::std::string* zonecenter_config::mutable_app_key() {
  set_has_app_key();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.app_key)
  return app_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_app_key() {
  // @@protoc_insertion_point(field_release:zonecenter_config.app_key)
  clear_has_app_key();
  return app_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_app_key(::std::string* app_key) {
  if (app_key != NULL) {
    set_has_app_key();
  } else {
    clear_has_app_key();
  }
  app_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_key);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.app_key)
}

// optional bool messagehub_enable = 14;
bool zonecenter_config::has_messagehub_enable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void zonecenter_config::set_has_messagehub_enable() {
  _has_bits_[0] |= 0x00002000u;
}
void zonecenter_config::clear_has_messagehub_enable() {
  _has_bits_[0] &= ~0x00002000u;
}
void zonecenter_config::clear_messagehub_enable() {
  messagehub_enable_ = false;
  clear_has_messagehub_enable();
}
bool zonecenter_config::messagehub_enable() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.messagehub_enable)
  return messagehub_enable_;
}
void zonecenter_config::set_messagehub_enable(bool value) {
  set_has_messagehub_enable();
  messagehub_enable_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.messagehub_enable)
}

// optional string messagehub_ip = 15;
bool zonecenter_config::has_messagehub_ip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void zonecenter_config::set_has_messagehub_ip() {
  _has_bits_[0] |= 0x00004000u;
}
void zonecenter_config::clear_has_messagehub_ip() {
  _has_bits_[0] &= ~0x00004000u;
}
void zonecenter_config::clear_messagehub_ip() {
  messagehub_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagehub_ip();
}
const ::std::string& zonecenter_config::messagehub_ip() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.messagehub_ip)
  return messagehub_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_messagehub_ip(const ::std::string& value) {
  set_has_messagehub_ip();
  messagehub_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.messagehub_ip)
}
void zonecenter_config::set_messagehub_ip(const char* value) {
  set_has_messagehub_ip();
  messagehub_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.messagehub_ip)
}
void zonecenter_config::set_messagehub_ip(const char* value, size_t size) {
  set_has_messagehub_ip();
  messagehub_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.messagehub_ip)
}
::std::string* zonecenter_config::mutable_messagehub_ip() {
  set_has_messagehub_ip();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.messagehub_ip)
  return messagehub_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_messagehub_ip() {
  // @@protoc_insertion_point(field_release:zonecenter_config.messagehub_ip)
  clear_has_messagehub_ip();
  return messagehub_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_messagehub_ip(::std::string* messagehub_ip) {
  if (messagehub_ip != NULL) {
    set_has_messagehub_ip();
  } else {
    clear_has_messagehub_ip();
  }
  messagehub_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagehub_ip);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.messagehub_ip)
}

// optional int32 messagehub_port = 16;
bool zonecenter_config::has_messagehub_port() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void zonecenter_config::set_has_messagehub_port() {
  _has_bits_[0] |= 0x00008000u;
}
void zonecenter_config::clear_has_messagehub_port() {
  _has_bits_[0] &= ~0x00008000u;
}
void zonecenter_config::clear_messagehub_port() {
  messagehub_port_ = 0;
  clear_has_messagehub_port();
}
::google::protobuf::int32 zonecenter_config::messagehub_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.messagehub_port)
  return messagehub_port_;
}
void zonecenter_config::set_messagehub_port(::google::protobuf::int32 value) {
  set_has_messagehub_port();
  messagehub_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.messagehub_port)
}

// optional int32 guard_port = 17;
bool zonecenter_config::has_guard_port() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void zonecenter_config::set_has_guard_port() {
  _has_bits_[0] |= 0x00010000u;
}
void zonecenter_config::clear_has_guard_port() {
  _has_bits_[0] &= ~0x00010000u;
}
void zonecenter_config::clear_guard_port() {
  guard_port_ = 0;
  clear_has_guard_port();
}
::google::protobuf::int32 zonecenter_config::guard_port() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.guard_port)
  return guard_port_;
}
void zonecenter_config::set_guard_port(::google::protobuf::int32 value) {
  set_has_guard_port();
  guard_port_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.guard_port)
}

// optional bool new_role_is_fuben = 18;
bool zonecenter_config::has_new_role_is_fuben() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void zonecenter_config::set_has_new_role_is_fuben() {
  _has_bits_[0] |= 0x00020000u;
}
void zonecenter_config::clear_has_new_role_is_fuben() {
  _has_bits_[0] &= ~0x00020000u;
}
void zonecenter_config::clear_new_role_is_fuben() {
  new_role_is_fuben_ = false;
  clear_has_new_role_is_fuben();
}
bool zonecenter_config::new_role_is_fuben() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.new_role_is_fuben)
  return new_role_is_fuben_;
}
void zonecenter_config::set_new_role_is_fuben(bool value) {
  set_has_new_role_is_fuben();
  new_role_is_fuben_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.new_role_is_fuben)
}

// optional bool open_gm = 19;
bool zonecenter_config::has_open_gm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void zonecenter_config::set_has_open_gm() {
  _has_bits_[0] |= 0x00040000u;
}
void zonecenter_config::clear_has_open_gm() {
  _has_bits_[0] &= ~0x00040000u;
}
void zonecenter_config::clear_open_gm() {
  open_gm_ = false;
  clear_has_open_gm();
}
bool zonecenter_config::open_gm() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.open_gm)
  return open_gm_;
}
void zonecenter_config::set_open_gm(bool value) {
  set_has_open_gm();
  open_gm_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.open_gm)
}

// optional bool auto_create_domain = 20;
bool zonecenter_config::has_auto_create_domain() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void zonecenter_config::set_has_auto_create_domain() {
  _has_bits_[0] |= 0x00080000u;
}
void zonecenter_config::clear_has_auto_create_domain() {
  _has_bits_[0] &= ~0x00080000u;
}
void zonecenter_config::clear_auto_create_domain() {
  auto_create_domain_ = false;
  clear_has_auto_create_domain();
}
bool zonecenter_config::auto_create_domain() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.auto_create_domain)
  return auto_create_domain_;
}
void zonecenter_config::set_auto_create_domain(bool value) {
  set_has_auto_create_domain();
  auto_create_domain_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.auto_create_domain)
}

// optional bool gated_launch = 21;
bool zonecenter_config::has_gated_launch() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void zonecenter_config::set_has_gated_launch() {
  _has_bits_[0] |= 0x00100000u;
}
void zonecenter_config::clear_has_gated_launch() {
  _has_bits_[0] &= ~0x00100000u;
}
void zonecenter_config::clear_gated_launch() {
  gated_launch_ = false;
  clear_has_gated_launch();
}
bool zonecenter_config::gated_launch() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.gated_launch)
  return gated_launch_;
}
void zonecenter_config::set_gated_launch(bool value) {
  set_has_gated_launch();
  gated_launch_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.gated_launch)
}

// optional string db_pass = 22;
bool zonecenter_config::has_db_pass() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void zonecenter_config::set_has_db_pass() {
  _has_bits_[0] |= 0x00200000u;
}
void zonecenter_config::clear_has_db_pass() {
  _has_bits_[0] &= ~0x00200000u;
}
void zonecenter_config::clear_db_pass() {
  db_pass_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_pass();
}
const ::std::string& zonecenter_config::db_pass() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.db_pass)
  return db_pass_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_db_pass(const ::std::string& value) {
  set_has_db_pass();
  db_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.db_pass)
}
void zonecenter_config::set_db_pass(const char* value) {
  set_has_db_pass();
  db_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.db_pass)
}
void zonecenter_config::set_db_pass(const char* value, size_t size) {
  set_has_db_pass();
  db_pass_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.db_pass)
}
::std::string* zonecenter_config::mutable_db_pass() {
  set_has_db_pass();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.db_pass)
  return db_pass_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_db_pass() {
  // @@protoc_insertion_point(field_release:zonecenter_config.db_pass)
  clear_has_db_pass();
  return db_pass_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_db_pass(::std::string* db_pass) {
  if (db_pass != NULL) {
    set_has_db_pass();
  } else {
    clear_has_db_pass();
  }
  db_pass_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_pass);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.db_pass)
}

// optional bool db_bg_save = 23;
bool zonecenter_config::has_db_bg_save() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void zonecenter_config::set_has_db_bg_save() {
  _has_bits_[0] |= 0x00400000u;
}
void zonecenter_config::clear_has_db_bg_save() {
  _has_bits_[0] &= ~0x00400000u;
}
void zonecenter_config::clear_db_bg_save() {
  db_bg_save_ = false;
  clear_has_db_bg_save();
}
bool zonecenter_config::db_bg_save() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.db_bg_save)
  return db_bg_save_;
}
void zonecenter_config::set_db_bg_save(bool value) {
  set_has_db_bg_save();
  db_bg_save_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.db_bg_save)
}

// optional bool allow_test_login = 24;
bool zonecenter_config::has_allow_test_login() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void zonecenter_config::set_has_allow_test_login() {
  _has_bits_[0] |= 0x00800000u;
}
void zonecenter_config::clear_has_allow_test_login() {
  _has_bits_[0] &= ~0x00800000u;
}
void zonecenter_config::clear_allow_test_login() {
  allow_test_login_ = false;
  clear_has_allow_test_login();
}
bool zonecenter_config::allow_test_login() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.allow_test_login)
  return allow_test_login_;
}
void zonecenter_config::set_allow_test_login(bool value) {
  set_has_allow_test_login();
  allow_test_login_ = value;
  // @@protoc_insertion_point(field_set:zonecenter_config.allow_test_login)
}

// optional string default_channel = 25;
bool zonecenter_config::has_default_channel() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void zonecenter_config::set_has_default_channel() {
  _has_bits_[0] |= 0x01000000u;
}
void zonecenter_config::clear_has_default_channel() {
  _has_bits_[0] &= ~0x01000000u;
}
void zonecenter_config::clear_default_channel() {
  default_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_channel();
}
const ::std::string& zonecenter_config::default_channel() const {
  // @@protoc_insertion_point(field_get:zonecenter_config.default_channel)
  return default_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_default_channel(const ::std::string& value) {
  set_has_default_channel();
  default_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zonecenter_config.default_channel)
}
void zonecenter_config::set_default_channel(const char* value) {
  set_has_default_channel();
  default_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zonecenter_config.default_channel)
}
void zonecenter_config::set_default_channel(const char* value, size_t size) {
  set_has_default_channel();
  default_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zonecenter_config.default_channel)
}
::std::string* zonecenter_config::mutable_default_channel() {
  set_has_default_channel();
  // @@protoc_insertion_point(field_mutable:zonecenter_config.default_channel)
  return default_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* zonecenter_config::release_default_channel() {
  // @@protoc_insertion_point(field_release:zonecenter_config.default_channel)
  clear_has_default_channel();
  return default_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void zonecenter_config::set_allocated_default_channel(::std::string* default_channel) {
  if (default_channel != NULL) {
    set_has_default_channel();
  } else {
    clear_has_default_channel();
  }
  default_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_channel);
  // @@protoc_insertion_point(field_set_allocated:zonecenter_config.default_channel)
}

inline const zonecenter_config* zonecenter_config::internal_default_instance() {
  return &zonecenter_config_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int worldserver_config::kCenterIpFieldNumber;
const int worldserver_config::kWsMgrPortFieldNumber;
const int worldserver_config::kPublicIpFieldNumber;
const int worldserver_config::kMaleTemplateFieldNumber;
const int worldserver_config::kFemaleTemplateFieldNumber;
const int worldserver_config::kFirstTaskIdFieldNumber;
const int worldserver_config::kAppKeyFieldNumber;
const int worldserver_config::kMissileDebugFieldNumber;
const int worldserver_config::kGuardPortFieldNumber;
const int worldserver_config::kDebugLogFieldNumber;
const int worldserver_config::kDamageDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

worldserver_config::worldserver_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_xconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:worldserver_config)
}

void worldserver_config::InitAsDefaultInstance() {
}

worldserver_config::worldserver_config(const worldserver_config& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:worldserver_config)
}

void worldserver_config::SharedCtor() {
  _cached_size_ = 0;
  center_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ws_mgr_port_, 0, reinterpret_cast<char*>(&damage_debug_) -
    reinterpret_cast<char*>(&ws_mgr_port_) + sizeof(damage_debug_));
}

worldserver_config::~worldserver_config() {
  // @@protoc_insertion_point(destructor:worldserver_config)
  SharedDtor();
}

void worldserver_config::SharedDtor() {
  center_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void worldserver_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* worldserver_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return worldserver_config_descriptor_;
}

const worldserver_config& worldserver_config::default_instance() {
  protobuf_InitDefaults_xconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<worldserver_config> worldserver_config_default_instance_;

worldserver_config* worldserver_config::New(::google::protobuf::Arena* arena) const {
  worldserver_config* n = new worldserver_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void worldserver_config::Clear() {
// @@protoc_insertion_point(message_clear_start:worldserver_config)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(worldserver_config, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<worldserver_config*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ws_mgr_port_, first_task_id_);
    if (has_center_ip()) {
      center_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_public_ip()) {
      public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_app_key()) {
      app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    missile_debug_ = false;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ZR_(debug_log_, damage_debug_);
    guard_port_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool worldserver_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:worldserver_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string center_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_center_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->center_ip().data(), this->center_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "worldserver_config.center_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ws_mgr_port;
        break;
      }

      // optional int32 ws_mgr_port = 2;
      case 2: {
        if (tag == 16) {
         parse_ws_mgr_port:
          set_has_ws_mgr_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ws_mgr_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_public_ip;
        break;
      }

      // optional string public_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_public_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_ip().data(), this->public_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "worldserver_config.public_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_male_template;
        break;
      }

      // optional int32 male_template = 4;
      case 4: {
        if (tag == 32) {
         parse_male_template:
          set_has_male_template();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &male_template_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_female_template;
        break;
      }

      // optional int32 female_template = 5;
      case 5: {
        if (tag == 40) {
         parse_female_template:
          set_has_female_template();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &female_template_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_first_task_id;
        break;
      }

      // optional int32 first_task_id = 6;
      case 6: {
        if (tag == 48) {
         parse_first_task_id:
          set_has_first_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_app_key;
        break;
      }

      // optional string app_key = 7;
      case 7: {
        if (tag == 58) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "worldserver_config.app_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_missile_debug;
        break;
      }

      // optional bool missile_debug = 8;
      case 8: {
        if (tag == 64) {
         parse_missile_debug:
          set_has_missile_debug();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missile_debug_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_guard_port;
        break;
      }

      // optional int32 guard_port = 9;
      case 9: {
        if (tag == 72) {
         parse_guard_port:
          set_has_guard_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_debug_log;
        break;
      }

      // optional bool debug_log = 10;
      case 10: {
        if (tag == 80) {
         parse_debug_log:
          set_has_debug_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_log_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_damage_debug;
        break;
      }

      // optional bool damage_debug = 11;
      case 11: {
        if (tag == 88) {
         parse_damage_debug:
          set_has_damage_debug();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &damage_debug_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:worldserver_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:worldserver_config)
  return false;
#undef DO_
}

void worldserver_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:worldserver_config)
  // optional string center_ip = 1;
  if (has_center_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->center_ip().data(), this->center_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.center_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->center_ip(), output);
  }

  // optional int32 ws_mgr_port = 2;
  if (has_ws_mgr_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ws_mgr_port(), output);
  }

  // optional string public_ip = 3;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), this->public_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.public_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->public_ip(), output);
  }

  // optional int32 male_template = 4;
  if (has_male_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->male_template(), output);
  }

  // optional int32 female_template = 5;
  if (has_female_template()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->female_template(), output);
  }

  // optional int32 first_task_id = 6;
  if (has_first_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->first_task_id(), output);
  }

  // optional string app_key = 7;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.app_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->app_key(), output);
  }

  // optional bool missile_debug = 8;
  if (has_missile_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->missile_debug(), output);
  }

  // optional int32 guard_port = 9;
  if (has_guard_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->guard_port(), output);
  }

  // optional bool debug_log = 10;
  if (has_debug_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->debug_log(), output);
  }

  // optional bool damage_debug = 11;
  if (has_damage_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->damage_debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:worldserver_config)
}

::google::protobuf::uint8* worldserver_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:worldserver_config)
  // optional string center_ip = 1;
  if (has_center_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->center_ip().data(), this->center_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.center_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->center_ip(), target);
  }

  // optional int32 ws_mgr_port = 2;
  if (has_ws_mgr_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ws_mgr_port(), target);
  }

  // optional string public_ip = 3;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), this->public_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.public_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->public_ip(), target);
  }

  // optional int32 male_template = 4;
  if (has_male_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->male_template(), target);
  }

  // optional int32 female_template = 5;
  if (has_female_template()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->female_template(), target);
  }

  // optional int32 first_task_id = 6;
  if (has_first_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->first_task_id(), target);
  }

  // optional string app_key = 7;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "worldserver_config.app_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->app_key(), target);
  }

  // optional bool missile_debug = 8;
  if (has_missile_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->missile_debug(), target);
  }

  // optional int32 guard_port = 9;
  if (has_guard_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->guard_port(), target);
  }

  // optional bool debug_log = 10;
  if (has_debug_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->debug_log(), target);
  }

  // optional bool damage_debug = 11;
  if (has_damage_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->damage_debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:worldserver_config)
  return target;
}

size_t worldserver_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:worldserver_config)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string center_ip = 1;
    if (has_center_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->center_ip());
    }

    // optional int32 ws_mgr_port = 2;
    if (has_ws_mgr_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ws_mgr_port());
    }

    // optional string public_ip = 3;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_ip());
    }

    // optional int32 male_template = 4;
    if (has_male_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->male_template());
    }

    // optional int32 female_template = 5;
    if (has_female_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->female_template());
    }

    // optional int32 first_task_id = 6;
    if (has_first_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_task_id());
    }

    // optional string app_key = 7;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }

    // optional bool missile_debug = 8;
    if (has_missile_debug()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 guard_port = 9;
    if (has_guard_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard_port());
    }

    // optional bool debug_log = 10;
    if (has_debug_log()) {
      total_size += 1 + 1;
    }

    // optional bool damage_debug = 11;
    if (has_damage_debug()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void worldserver_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:worldserver_config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const worldserver_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const worldserver_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:worldserver_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:worldserver_config)
    UnsafeMergeFrom(*source);
  }
}

void worldserver_config::MergeFrom(const worldserver_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:worldserver_config)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void worldserver_config::UnsafeMergeFrom(const worldserver_config& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_ip()) {
      set_has_center_ip();
      center_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.center_ip_);
    }
    if (from.has_ws_mgr_port()) {
      set_ws_mgr_port(from.ws_mgr_port());
    }
    if (from.has_public_ip()) {
      set_has_public_ip();
      public_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_ip_);
    }
    if (from.has_male_template()) {
      set_male_template(from.male_template());
    }
    if (from.has_female_template()) {
      set_female_template(from.female_template());
    }
    if (from.has_first_task_id()) {
      set_first_task_id(from.first_task_id());
    }
    if (from.has_app_key()) {
      set_has_app_key();
      app_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_key_);
    }
    if (from.has_missile_debug()) {
      set_missile_debug(from.missile_debug());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guard_port()) {
      set_guard_port(from.guard_port());
    }
    if (from.has_debug_log()) {
      set_debug_log(from.debug_log());
    }
    if (from.has_damage_debug()) {
      set_damage_debug(from.damage_debug());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void worldserver_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:worldserver_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void worldserver_config::CopyFrom(const worldserver_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:worldserver_config)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool worldserver_config::IsInitialized() const {

  return true;
}

void worldserver_config::Swap(worldserver_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void worldserver_config::InternalSwap(worldserver_config* other) {
  center_ip_.Swap(&other->center_ip_);
  std::swap(ws_mgr_port_, other->ws_mgr_port_);
  public_ip_.Swap(&other->public_ip_);
  std::swap(male_template_, other->male_template_);
  std::swap(female_template_, other->female_template_);
  std::swap(first_task_id_, other->first_task_id_);
  app_key_.Swap(&other->app_key_);
  std::swap(missile_debug_, other->missile_debug_);
  std::swap(guard_port_, other->guard_port_);
  std::swap(debug_log_, other->debug_log_);
  std::swap(damage_debug_, other->damage_debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata worldserver_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = worldserver_config_descriptor_;
  metadata.reflection = worldserver_config_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// worldserver_config

// optional string center_ip = 1;
bool worldserver_config::has_center_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void worldserver_config::set_has_center_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void worldserver_config::clear_has_center_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void worldserver_config::clear_center_ip() {
  center_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_center_ip();
}
const ::std::string& worldserver_config::center_ip() const {
  // @@protoc_insertion_point(field_get:worldserver_config.center_ip)
  return center_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_center_ip(const ::std::string& value) {
  set_has_center_ip();
  center_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:worldserver_config.center_ip)
}
void worldserver_config::set_center_ip(const char* value) {
  set_has_center_ip();
  center_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:worldserver_config.center_ip)
}
void worldserver_config::set_center_ip(const char* value, size_t size) {
  set_has_center_ip();
  center_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:worldserver_config.center_ip)
}
::std::string* worldserver_config::mutable_center_ip() {
  set_has_center_ip();
  // @@protoc_insertion_point(field_mutable:worldserver_config.center_ip)
  return center_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* worldserver_config::release_center_ip() {
  // @@protoc_insertion_point(field_release:worldserver_config.center_ip)
  clear_has_center_ip();
  return center_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_allocated_center_ip(::std::string* center_ip) {
  if (center_ip != NULL) {
    set_has_center_ip();
  } else {
    clear_has_center_ip();
  }
  center_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), center_ip);
  // @@protoc_insertion_point(field_set_allocated:worldserver_config.center_ip)
}

// optional int32 ws_mgr_port = 2;
bool worldserver_config::has_ws_mgr_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void worldserver_config::set_has_ws_mgr_port() {
  _has_bits_[0] |= 0x00000002u;
}
void worldserver_config::clear_has_ws_mgr_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void worldserver_config::clear_ws_mgr_port() {
  ws_mgr_port_ = 0;
  clear_has_ws_mgr_port();
}
::google::protobuf::int32 worldserver_config::ws_mgr_port() const {
  // @@protoc_insertion_point(field_get:worldserver_config.ws_mgr_port)
  return ws_mgr_port_;
}
void worldserver_config::set_ws_mgr_port(::google::protobuf::int32 value) {
  set_has_ws_mgr_port();
  ws_mgr_port_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.ws_mgr_port)
}

// optional string public_ip = 3;
bool worldserver_config::has_public_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void worldserver_config::set_has_public_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void worldserver_config::clear_has_public_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void worldserver_config::clear_public_ip() {
  public_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_public_ip();
}
const ::std::string& worldserver_config::public_ip() const {
  // @@protoc_insertion_point(field_get:worldserver_config.public_ip)
  return public_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_public_ip(const ::std::string& value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:worldserver_config.public_ip)
}
void worldserver_config::set_public_ip(const char* value) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:worldserver_config.public_ip)
}
void worldserver_config::set_public_ip(const char* value, size_t size) {
  set_has_public_ip();
  public_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:worldserver_config.public_ip)
}
::std::string* worldserver_config::mutable_public_ip() {
  set_has_public_ip();
  // @@protoc_insertion_point(field_mutable:worldserver_config.public_ip)
  return public_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* worldserver_config::release_public_ip() {
  // @@protoc_insertion_point(field_release:worldserver_config.public_ip)
  clear_has_public_ip();
  return public_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_allocated_public_ip(::std::string* public_ip) {
  if (public_ip != NULL) {
    set_has_public_ip();
  } else {
    clear_has_public_ip();
  }
  public_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_ip);
  // @@protoc_insertion_point(field_set_allocated:worldserver_config.public_ip)
}

// optional int32 male_template = 4;
bool worldserver_config::has_male_template() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void worldserver_config::set_has_male_template() {
  _has_bits_[0] |= 0x00000008u;
}
void worldserver_config::clear_has_male_template() {
  _has_bits_[0] &= ~0x00000008u;
}
void worldserver_config::clear_male_template() {
  male_template_ = 0;
  clear_has_male_template();
}
::google::protobuf::int32 worldserver_config::male_template() const {
  // @@protoc_insertion_point(field_get:worldserver_config.male_template)
  return male_template_;
}
void worldserver_config::set_male_template(::google::protobuf::int32 value) {
  set_has_male_template();
  male_template_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.male_template)
}

// optional int32 female_template = 5;
bool worldserver_config::has_female_template() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void worldserver_config::set_has_female_template() {
  _has_bits_[0] |= 0x00000010u;
}
void worldserver_config::clear_has_female_template() {
  _has_bits_[0] &= ~0x00000010u;
}
void worldserver_config::clear_female_template() {
  female_template_ = 0;
  clear_has_female_template();
}
::google::protobuf::int32 worldserver_config::female_template() const {
  // @@protoc_insertion_point(field_get:worldserver_config.female_template)
  return female_template_;
}
void worldserver_config::set_female_template(::google::protobuf::int32 value) {
  set_has_female_template();
  female_template_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.female_template)
}

// optional int32 first_task_id = 6;
bool worldserver_config::has_first_task_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void worldserver_config::set_has_first_task_id() {
  _has_bits_[0] |= 0x00000020u;
}
void worldserver_config::clear_has_first_task_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void worldserver_config::clear_first_task_id() {
  first_task_id_ = 0;
  clear_has_first_task_id();
}
::google::protobuf::int32 worldserver_config::first_task_id() const {
  // @@protoc_insertion_point(field_get:worldserver_config.first_task_id)
  return first_task_id_;
}
void worldserver_config::set_first_task_id(::google::protobuf::int32 value) {
  set_has_first_task_id();
  first_task_id_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.first_task_id)
}

// optional string app_key = 7;
bool worldserver_config::has_app_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void worldserver_config::set_has_app_key() {
  _has_bits_[0] |= 0x00000040u;
}
void worldserver_config::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000040u;
}
void worldserver_config::clear_app_key() {
  app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_key();
}
const ::std::string& worldserver_config::app_key() const {
  // @@protoc_insertion_point(field_get:worldserver_config.app_key)
  return app_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_app_key(const ::std::string& value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:worldserver_config.app_key)
}
void worldserver_config::set_app_key(const char* value) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:worldserver_config.app_key)
}
void worldserver_config::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:worldserver_config.app_key)
}
::std::string* worldserver_config::mutable_app_key() {
  set_has_app_key();
  // @@protoc_insertion_point(field_mutable:worldserver_config.app_key)
  return app_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* worldserver_config::release_app_key() {
  // @@protoc_insertion_point(field_release:worldserver_config.app_key)
  clear_has_app_key();
  return app_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void worldserver_config::set_allocated_app_key(::std::string* app_key) {
  if (app_key != NULL) {
    set_has_app_key();
  } else {
    clear_has_app_key();
  }
  app_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_key);
  // @@protoc_insertion_point(field_set_allocated:worldserver_config.app_key)
}

// optional bool missile_debug = 8;
bool worldserver_config::has_missile_debug() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void worldserver_config::set_has_missile_debug() {
  _has_bits_[0] |= 0x00000080u;
}
void worldserver_config::clear_has_missile_debug() {
  _has_bits_[0] &= ~0x00000080u;
}
void worldserver_config::clear_missile_debug() {
  missile_debug_ = false;
  clear_has_missile_debug();
}
bool worldserver_config::missile_debug() const {
  // @@protoc_insertion_point(field_get:worldserver_config.missile_debug)
  return missile_debug_;
}
void worldserver_config::set_missile_debug(bool value) {
  set_has_missile_debug();
  missile_debug_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.missile_debug)
}

// optional int32 guard_port = 9;
bool worldserver_config::has_guard_port() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void worldserver_config::set_has_guard_port() {
  _has_bits_[0] |= 0x00000100u;
}
void worldserver_config::clear_has_guard_port() {
  _has_bits_[0] &= ~0x00000100u;
}
void worldserver_config::clear_guard_port() {
  guard_port_ = 0;
  clear_has_guard_port();
}
::google::protobuf::int32 worldserver_config::guard_port() const {
  // @@protoc_insertion_point(field_get:worldserver_config.guard_port)
  return guard_port_;
}
void worldserver_config::set_guard_port(::google::protobuf::int32 value) {
  set_has_guard_port();
  guard_port_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.guard_port)
}

// optional bool debug_log = 10;
bool worldserver_config::has_debug_log() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void worldserver_config::set_has_debug_log() {
  _has_bits_[0] |= 0x00000200u;
}
void worldserver_config::clear_has_debug_log() {
  _has_bits_[0] &= ~0x00000200u;
}
void worldserver_config::clear_debug_log() {
  debug_log_ = false;
  clear_has_debug_log();
}
bool worldserver_config::debug_log() const {
  // @@protoc_insertion_point(field_get:worldserver_config.debug_log)
  return debug_log_;
}
void worldserver_config::set_debug_log(bool value) {
  set_has_debug_log();
  debug_log_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.debug_log)
}

// optional bool damage_debug = 11;
bool worldserver_config::has_damage_debug() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void worldserver_config::set_has_damage_debug() {
  _has_bits_[0] |= 0x00000400u;
}
void worldserver_config::clear_has_damage_debug() {
  _has_bits_[0] &= ~0x00000400u;
}
void worldserver_config::clear_damage_debug() {
  damage_debug_ = false;
  clear_has_damage_debug();
}
bool worldserver_config::damage_debug() const {
  // @@protoc_insertion_point(field_get:worldserver_config.damage_debug)
  return damage_debug_;
}
void worldserver_config::set_damage_debug(bool value) {
  set_has_damage_debug();
  damage_debug_ = value;
  // @@protoc_insertion_point(field_set:worldserver_config.damage_debug)
}

inline const worldserver_config* worldserver_config::internal_default_instance() {
  return &worldserver_config_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int robot_config::kServerIpFieldNumber;
const int robot_config::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

robot_config::robot_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_xconfig_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:robot_config)
}

void robot_config::InitAsDefaultInstance() {
}

robot_config::robot_config(const robot_config& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robot_config)
}

void robot_config::SharedCtor() {
  _cached_size_ = 0;
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_ = 0;
}

robot_config::~robot_config() {
  // @@protoc_insertion_point(destructor:robot_config)
  SharedDtor();
}

void robot_config::SharedDtor() {
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void robot_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* robot_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return robot_config_descriptor_;
}

const robot_config& robot_config::default_instance() {
  protobuf_InitDefaults_xconfig_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<robot_config> robot_config_default_instance_;

robot_config* robot_config::New(::google::protobuf::Arena* arena) const {
  robot_config* n = new robot_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void robot_config::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_config)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_server_ip()) {
      server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    group_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool robot_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robot_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robot_config.server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (tag == 16) {
         parse_group:
          set_has_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robot_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robot_config)
  return false;
#undef DO_
}

void robot_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robot_config)
  // optional string server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_config.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_ip(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robot_config)
}

::google::protobuf::uint8* robot_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robot_config)
  // optional string server_ip = 1;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robot_config.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_ip(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_config)
  return target;
}

size_t robot_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_config)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string server_ip = 1;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void robot_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_config)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const robot_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const robot_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_config)
    UnsafeMergeFrom(*source);
  }
}

void robot_config::MergeFrom(const robot_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_config)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void robot_config::UnsafeMergeFrom(const robot_config& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_ip()) {
      set_has_server_ip();
      server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void robot_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void robot_config::CopyFrom(const robot_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_config)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool robot_config::IsInitialized() const {

  return true;
}

void robot_config::Swap(robot_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void robot_config::InternalSwap(robot_config* other) {
  server_ip_.Swap(&other->server_ip_);
  std::swap(group_, other->group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata robot_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = robot_config_descriptor_;
  metadata.reflection = robot_config_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// robot_config

// optional string server_ip = 1;
bool robot_config::has_server_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void robot_config::set_has_server_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void robot_config::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void robot_config::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ip();
}
const ::std::string& robot_config::server_ip() const {
  // @@protoc_insertion_point(field_get:robot_config.server_ip)
  return server_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void robot_config::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robot_config.server_ip)
}
void robot_config::set_server_ip(const char* value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robot_config.server_ip)
}
void robot_config::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robot_config.server_ip)
}
::std::string* robot_config::mutable_server_ip() {
  set_has_server_ip();
  // @@protoc_insertion_point(field_mutable:robot_config.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* robot_config::release_server_ip() {
  // @@protoc_insertion_point(field_release:robot_config.server_ip)
  clear_has_server_ip();
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void robot_config::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    set_has_server_ip();
  } else {
    clear_has_server_ip();
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:robot_config.server_ip)
}

// optional int32 group = 2;
bool robot_config::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void robot_config::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
void robot_config::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
void robot_config::clear_group() {
  group_ = 0;
  clear_has_group();
}
::google::protobuf::int32 robot_config::group() const {
  // @@protoc_insertion_point(field_get:robot_config.group)
  return group_;
}
void robot_config::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:robot_config.group)
}

inline const robot_config* robot_config::internal_default_instance() {
  return &robot_config_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
